@page "/configuracao"

@using ProjetoFamiliaAdvogado.Model.Cadastro
@using ProjetoFamiliaAdvogado.Repository
@using ProjetoFamiliaAdvogado.Model.Login

@inject IConsulta_Local iConsultaLocal
@inject NavigationManager Navigation

<link rel="stylesheet" href="css/projetoFamilia/configuracao.css" />

<h4 class="titulo-configuracoes">Configurações De Perfil</h4>

<br />
<br />

<div>
    @if (usuarioModels != null && usuarioModels.Count > 0)
    {
        <EditForm Model="@usuarioModel" OnValidSubmit="AtualizarUsuario">
            <DataAnnotationsValidator />

            <div class="text-center">
                <div class="mb-2">
                    <img src="@_userAvatar" @onclick="ExibirAcao" height="100" width="100" class="rounded-circle" />
                </div>
            </div>

            <br />

            <div class="form-group">
                <input class="form-control" type="hidden" @bind-value="@usuarioModel.IdUsuario">
                <ValidationMessage For="@(()=> usuarioModel.IdUsuario)" />
            </div>

            <div class="form-group">
                <label id="fomrLabel">Usuario:</label>
                <input class="form-control" @bind-value="@usuarioModel.UsuarioLogin" placeholder="Usuario">
                <ValidationMessage For="@(()=> usuarioModel.UsuarioLogin)" />
            </div>

            <br />

            <div class="form-group">
                <label id="fomrLabel">Nome:</label>
                <input class="form-control" @bind-value="@usuarioModel.Nome" placeholder="Primeiro Nome">
                <ValidationMessage For="@(()=> usuarioModel.Nome)" />
            </div>

            <div class="form-group">
                <input class="form-control" type="hidden" @bind-value="@usuarioModel.Nome">
                <ValidationMessage For="@(()=> usuarioModel.UsuarioLogin)" />
            </div>

            <br />

            <div class="form-group">
                <label id="fomrLabel">Sobrenome:</label>
                <input class="form-control" @bind-value="@usuarioModel.Sobrenome" placeholder="Sobrenome">
                <ValidationMessage For="@(()=> usuarioModel.Sobrenome)" />
            </div>

            <br />

            <div class="mt-2 form-group">
                <label id="fomrLabel">Senha:</label>
                <input type="password" @bind-value="@usuarioModel.Password" class="form-control" placeholder="senha">
                <ValidationMessage For="@(()=> usuarioModel.Password)" />
            </div>

            <br />
            <br />

            <div class="text-center mt-2">
                <button class="btn btn-success" type="submit" @onclick="@(()=> AtualizarUsuario())">
                    <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
                    Atualizar
                </button>
            </div>
        </EditForm>
    }
</div>

<br />
<br />
<br />

<button type="submit" @onclick="@(()=> DeletarConta())" class="btn btn-danger"> Deletar Conta </button>

<br />
<br />

@code 
{
    UsuarioModel usuarioModel = new();
    LoginModel LoginModel = new();

    private List<UsuarioModel> usuarioModels;
    private List<LoginModel> loginSalvos;
    List<LoginSessaoModel> loginGeralModels;

    private UsuarioModel Usuario;

    private string NomeUsuario;
    private string _spinnerClass = "";
    private string _imageBase64Data;
    private string _userAvatar;

    private int posicaoLogin;
    private int posicaoSessao;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var verificarUsuario = await iConsultaLocal.GetAllLoginGeral();

            if (verificarUsuario != null && verificarUsuario.Count > 0)
            {
                NomeUsuario = verificarUsuario[0].Usuario;
            }

            usuarioModels = await iConsultaLocal.GetAllUsuario();

            if (usuarioModels != null && usuarioModels.Count > 0)
            {
                var verificar = usuarioModels.FirstOrDefault(x => x.UsuarioLogin == NomeUsuario);

                if (verificar != null)
                {
                    if (verificar.UserAvatar != null)
                    {
                        var trazerImagem = GetImageBase64(verificar);
                        _userAvatar = trazerImagem;
                    }
                    else
                    {
                        _userAvatar = "images/user.png";
                    }
                }

                foreach (var item in usuarioModels)
                {
                    @if (NomeUsuario == @item.UsuarioLogin)
                    {
                        var response = await iConsultaLocal.GetUsuarioByID(item.IdUsuario);

                        if (response != null)
                        {
                            usuarioModel.IdUsuario = response.IdUsuario;
                            usuarioModel.UsuarioLogin = response.UsuarioLogin;
                            usuarioModel.Nome = response.Nome;
                            usuarioModel.Sobrenome = response.Sobrenome;
                            usuarioModel.Password = response.Password;
                        }
                    }
                }
            }

            loginSalvos = await iConsultaLocal.GetAllLogin();

            posicaoLogin = loginSalvos.FindIndex(usuario => usuario.Usuario == NomeUsuario);

            loginGeralModels = await iConsultaLocal.GetAllLoginGeral();

            posicaoSessao = loginGeralModels.FindIndex(usuario => usuario.Usuario == NomeUsuario);
        }
        catch (Exception ex)
        {
            Consulta_Local consulta_Local = new Consulta_Local();
            consulta_Local.RegistrarErro(ex);
            throw;
        }
    }

    private async void DeletarConta()
    {
        try
        {
            bool resposta = await App.Current.MainPage.DisplayAlert("Atenção", "Deseja continuar?", "Sim", "Não");

            if (resposta)
            {
                // Código a ser executado se a resposta for "Sim"
                var response = await iConsultaLocal.DeleteUsuario(usuarioModel);
                var response1 = await iConsultaLocal.DeleteLogin(loginSalvos[posicaoLogin]);
                if (response > 0)
                {
                    await iConsultaLocal.DeleteLoginGeral(loginGeralModels[0]);
                    await OnInitializedAsync();
                    this.StateHasChanged();
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                // Código a ser executado se a resposta for "Não"
            }
        }
        catch (Exception ex)
        {
            Consulta_Local consulta_Local = new Consulta_Local();
            consulta_Local.RegistrarErro(ex);
            throw;
        }
    }

    public async void AtualizarUsuario()
    {
        try
        {
            _spinnerClass = "spinner-border spinner-border-sm";

            bool resposta = await App.Current.MainPage.DisplayAlert("Atenção", "Deseja continuar?", "Sim", "Não");

            if (resposta)
            {
                if (!string.IsNullOrWhiteSpace(_imageBase64Data))
                {
                    // Converter a imagem em bytes
                    var imageBytes = Convert.FromBase64String(_imageBase64Data);

                    // Criar o objeto ImageModel
                    var imageModel = usuarioModel;
                    imageModel.IdUsuario = usuarioModel.IdUsuario;
                    imageModel.UserAvatar = imageBytes;
                    imageModel.Nome = usuarioModel.Nome;
                    imageModel.Sobrenome = usuarioModel.Sobrenome;
                    imageModel.Genero = usuarioModel.Genero;
                    imageModel.Password = usuarioModel.Password;
                    imageModel.UsuarioLogin = usuarioModel.UsuarioLogin;
                    imageModel.NameImage = _userAvatar;

                    Usuario = imageModel;
                }

                // Código a ser executado se a resposta for "Sim"
                int linhasAfetadas;

                if (Usuario != null)
                {
                    linhasAfetadas = await iConsultaLocal.UpdateUsuario(Usuario);
                }
                else
                {
                    linhasAfetadas = await iConsultaLocal.UpdateUsuario(usuarioModel);
                }

                if (linhasAfetadas > 0)
                {
                    // A atualização foi bem-sucedida
                    var loginModel = new Model.Login.LoginModel
                    {
                        IdLogin = loginSalvos[posicaoLogin].IdLogin,
                        Usuario = usuarioModel.UsuarioLogin,
                        Password = usuarioModel.Password
                    };

                    await iConsultaLocal.UpdateLogin(loginModel);

                    var loginSessao = new Model.Login.LoginSessaoModel
                    {
                        IdLogin = loginGeralModels[posicaoSessao].IdLogin,
                        Usuario = usuarioModel.UsuarioLogin
                    };

                    await iConsultaLocal.UpdateLoginGeral(loginSessao);

                    await App.Current.MainPage.DisplayAlert("Atenção", "atualização foi bem-sucedida!", "OK");
                }
                else
                {
                    // A atualização falhou
                    await App.Current.MainPage.DisplayAlert("Atenção", "atualização falhou!", "OK");
                }
            }
            else
            {
                // Código a ser executado se a resposta for "Não"
            }

            _spinnerClass = "";
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Consulta_Local consulta_Local = new Consulta_Local();
            consulta_Local.RegistrarErro(ex);
            throw;
        }
    }

    private async void ExibirAcao()
    {
        try
        {
            string response = await App.Current.MainPage.DisplayActionSheet("Selecionar a opção", "OK", null, "Tirar foto", "Add Foto");

            if (response == "Tirar foto")
            {
                if (_userAvatar != "images/user.png")
                {
                    _userAvatar = "images/user.png";
                    _imageBase64Data = null;
                }
            }
            else if (response == "Add Foto")
            {
                var photo = await MediaPicker.Default.PickPhotoAsync();
                if (photo != null)
                {
                    using (var stream = await photo.OpenReadAsync())
                    {
                        var memoryStream = new MemoryStream();
                        await stream.CopyToAsync(memoryStream);
                        var imageBytes = memoryStream.ToArray();

                        // Converter os bytes em uma string base64 para exibir a imagem na tela
                        _userAvatar = string.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageBytes));

                        // Armazenar a string base64 para ser usada posteriormente na validação
                        _imageBase64Data = Convert.ToBase64String(imageBytes);
                        this.StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Consulta_Local consulta_Local = new Consulta_Local();
            consulta_Local.RegistrarErro(ex);
            throw;
        }
    }

    public string GetImageBase64(UsuarioModel usuario)
    {
        try
        {
            var imageData = usuario.UserAvatar;
            var imageBase64 = Convert.ToBase64String(imageData);
            return string.Format("data:image/png;base64,{0}", imageBase64);
        }
        catch (Exception ex)
        {
            Consulta_Local consulta_Local = new Consulta_Local();
            consulta_Local.RegistrarErro(ex);
            throw;
        }
    }
}
